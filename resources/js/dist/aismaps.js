// resources/js/aismaps.js
function leafletAISMaps() {
  let markerClusterEnabled = false;
  let markers;
  return {
    init: async function() {
      console.log("start leafletAISMaps");
      const map = L.map(this.$refs.map.id).setView([51.505, -0.09], 13);
      const tiles = L.tileLayer.provider("OpenStreetMap.Mapnik").addTo(map);
      const marker1 = L.marker([51.505, -0.09]).bindPopup("Marker 1");
      const marker2 = L.marker([51.51, -0.1], {
        icon: L.AwesomeMarkers.icon({
          icon: "coffee",
          markerColor: "green",
          prefix: "fa"
        })
      }).bindPopup("Marker 2");
      const marker3 = L.marker([51.52, -0.08]).bindPopup("Marker 3");
      markers = L.featureGroup([marker1, marker2, marker3]);
      map.addLayer(markers);
      try {
        const response = await axios.get(
          "https://ksop.cakrawala.id/api/aisdataunique"
        );
        const aisData = response.data.message;
        aisData.forEach((aisItem) => {
          const marker = L.marker([
            aisItem.latitude,
            aisItem.longitude
          ]).bindPopup(`AIS Data: ${JSON.stringify(aisItem)}`);
          if (aisItem.is_inside_geofence === 1) {
            const pulsingIcon = L.icon.pulse({
              iconSize: [10, 10],
              color: "red",
              fillColor: "red",
              animate: true,
              pulseColor: "red"
            });
            marker.setIcon(pulsingIcon);
          }
          markers.addLayer(marker);
        });
        map.addLayer(markers);
      } catch (error) {
        console.error("Error fetching AIS data:", error);
      }
      map.on("load", function() {
      });
      map.pm.setGlobalOptions({ optIn: false });
      map.pm.addControls({
        position: "topleft",
        drawMarker: false
        // Disable drawing markers (use your cluster markers instead)
      });
      L.control.locate().addTo(map);
      const sidebar = L.control.sidebar({
        autopan: false,
        closeButton: true,
        container: "sidebar",
        position: "left"
      }).addTo(map);
      marker3.on("click", function() {
        sidebar.open("marker3Content");
      });
      sidebar.addPanel({
        id: "marker3Content",
        tab: '<i class="fa fa-info"></i>',
        pane: `<h1>Marker 3 Content</h1>
                       <button id="toggleMarkerCluster">Toggle Marker Cluster</button>
                       <p>This is some content for Marker 3.</p>`,
        title: "Marker 3 Information",
        position: "top"
      });
      document.getElementById("toggleMarkerCluster").addEventListener("click", function() {
        markerClusterEnabled = !markerClusterEnabled;
        if (markerClusterEnabled) {
          map.removeLayer(markers);
          markers = L.markerClusterGroup();
          map.addLayer(markers);
          markers.addLayer(
            L.featureGroup([marker1, marker2, marker3])
          );
        } else {
          map.removeLayer(markers);
          markers = L.featureGroup([marker1, marker2, marker3]);
          map.addLayer(markers);
        }
      });
    }
  };
}
export {
  leafletAISMaps as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vYWlzbWFwcy5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGVhZmxldEFJU01hcHMoKSB7XHJcbiAgICBsZXQgbWFya2VyQ2x1c3RlckVuYWJsZWQgPSBmYWxzZTtcclxuICAgIGxldCBtYXJrZXJzO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RhcnQgbGVhZmxldEFJU01hcHNcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hcCA9IEwubWFwKHRoaXMuJHJlZnMubWFwLmlkKS5zZXRWaWV3KFs1MS41MDUsIC0wLjA5XSwgMTMpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGlsZXMgPSBMLnRpbGVMYXllclxyXG4gICAgICAgICAgICAgICAgLnByb3ZpZGVyKFwiT3BlblN0cmVldE1hcC5NYXBuaWtcIilcclxuICAgICAgICAgICAgICAgIC5hZGRUbyhtYXApO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGluZGl2aWR1YWwgbWFya2VycyB0byB0aGUgbWFya2VyIGNsdXN0ZXIgZ3JvdXBcclxuICAgICAgICAgICAgY29uc3QgbWFya2VyMSA9IEwubWFya2VyKFs1MS41MDUsIC0wLjA5XSkuYmluZFBvcHVwKFwiTWFya2VyIDFcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hcmtlcjIgPSBMLm1hcmtlcihbNTEuNTEsIC0wLjFdLCB7XHJcbiAgICAgICAgICAgICAgICBpY29uOiBMLkF3ZXNvbWVNYXJrZXJzLmljb24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGljb246IFwiY29mZmVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyQ29sb3I6IFwiZ3JlZW5cIixcclxuICAgICAgICAgICAgICAgICAgICBwcmVmaXg6IFwiZmFcIixcclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICB9KS5iaW5kUG9wdXAoXCJNYXJrZXIgMlwiKTtcclxuICAgICAgICAgICAgY29uc3QgbWFya2VyMyA9IEwubWFya2VyKFs1MS41MiwgLTAuMDhdKS5iaW5kUG9wdXAoXCJNYXJrZXIgM1wiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBtYXJrZXJzIHRvIGEgZmVhdHVyZSBncm91cCAobm90IGNsdXN0ZXJpbmcgYnkgZGVmYXVsdClcclxuICAgICAgICAgICAgbWFya2VycyA9IEwuZmVhdHVyZUdyb3VwKFttYXJrZXIxLCBtYXJrZXIyLCBtYXJrZXIzXSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgdGhlIGZlYXR1cmUgZ3JvdXAgdG8gdGhlIG1hcFxyXG4gICAgICAgICAgICBtYXAuYWRkTGF5ZXIobWFya2Vycyk7XHJcblxyXG4gICAgICAgICAgICAvLyBGZXRjaCBBSVMgZGF0YSBmcm9tIHRoZSBBUElcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9rc29wLmNha3Jhd2FsYS5pZC9hcGkvYWlzZGF0YXVuaXF1ZVwiXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWlzRGF0YSA9IHJlc3BvbnNlLmRhdGEubWVzc2FnZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggQUlTIGRhdGEgYW5kIGNyZWF0ZSBtYXJrZXJzXHJcbiAgICAgICAgICAgICAgICBhaXNEYXRhLmZvckVhY2goKGFpc0l0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXIgPSBMLm1hcmtlcihbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFpc0l0ZW0ubGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFpc0l0ZW0ubG9uZ2l0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIF0pLmJpbmRQb3B1cChgQUlTIERhdGE6ICR7SlNPTi5zdHJpbmdpZnkoYWlzSXRlbSl9YCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGluc2lkZSBnZW9mZW5jZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhaXNJdGVtLmlzX2luc2lkZV9nZW9mZW5jZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCbGlua2luZyBlZmZlY3QgdXNpbmcgTGVhZmxldCBQdWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwdWxzaW5nSWNvbiA9IEwuaWNvbi5wdWxzZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzEwLCAxMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJyZWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogXCJyZWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWxzZUNvbG9yOiBcInJlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyLnNldEljb24ocHVsc2luZ0ljb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vycy5hZGRMYXllcihtYXJrZXIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBtYXJrZXIgY2x1c3RlciBncm91cCB0byB0aGUgbWFwXHJcbiAgICAgICAgICAgICAgICBtYXAuYWRkTGF5ZXIobWFya2Vycyk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgQUlTIGRhdGE6XCIsIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWFwLm9uKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7fSk7XHJcblxyXG4gICAgICAgICAgICAvLyBFbmFibGUgTGVhZmxldC1HZW9tYW4gb24gdGhlIG1hcFxyXG4gICAgICAgICAgICBtYXAucG0uc2V0R2xvYmFsT3B0aW9ucyh7IG9wdEluOiBmYWxzZSB9KTsgLy8gU2V0IHRvIGZhbHNlIHRvIGVuYWJsZSBieSBkZWZhdWx0XHJcblxyXG4gICAgICAgICAgICAvLyBSZWdpc3RlciB0aGUgTGVhZmxldC1HZW9tYW4gdG9vbGJhclxyXG4gICAgICAgICAgICBtYXAucG0uYWRkQ29udHJvbHMoe1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwidG9wbGVmdFwiLFxyXG4gICAgICAgICAgICAgICAgZHJhd01hcmtlcjogZmFsc2UsIC8vIERpc2FibGUgZHJhd2luZyBtYXJrZXJzICh1c2UgeW91ciBjbHVzdGVyIG1hcmtlcnMgaW5zdGVhZClcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBMLmNvbnRyb2wubG9jYXRlKCkuYWRkVG8obWFwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBMZWFmbGV0IFNpZGViYXJcclxuICAgICAgICAgICAgY29uc3Qgc2lkZWJhciA9IEwuY29udHJvbFxyXG4gICAgICAgICAgICAgICAgLnNpZGViYXIoe1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wYW46IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogXCJzaWRlYmFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwibGVmdFwiLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5hZGRUbyhtYXApO1xyXG5cclxuICAgICAgICAgICAgLy8gRXZlbnQgaGFuZGxlciBmb3IgbWFya2VyMyBjbGljayB0byBzaG93IHNpZGViYXJcclxuICAgICAgICAgICAgbWFya2VyMy5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHNpZGViYXIub3BlbihcIm1hcmtlcjNDb250ZW50XCIpOyAvLyBPcGVuIHRoZSBzcGVjaWZpYyBjb250ZW50IHdpdGggSUQgJ21hcmtlcjNDb250ZW50J1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBhIHBhbmVsIHRvIHRoZSBzaWRlYmFyXHJcbiAgICAgICAgICAgIHNpZGViYXIuYWRkUGFuZWwoe1xyXG4gICAgICAgICAgICAgICAgaWQ6IFwibWFya2VyM0NvbnRlbnRcIixcclxuICAgICAgICAgICAgICAgIHRhYjogJzxpIGNsYXNzPVwiZmEgZmEtaW5mb1wiPjwvaT4nLFxyXG4gICAgICAgICAgICAgICAgcGFuZTogYDxoMT5NYXJrZXIgMyBDb250ZW50PC9oMT5cclxuICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwidG9nZ2xlTWFya2VyQ2x1c3RlclwiPlRvZ2dsZSBNYXJrZXIgQ2x1c3RlcjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIDxwPlRoaXMgaXMgc29tZSBjb250ZW50IGZvciBNYXJrZXIgMy48L3A+YCxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIk1hcmtlciAzIEluZm9ybWF0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJ0b3BcIixcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBFdmVudCBoYW5kbGVyIGZvciB0aGUgYnV0dG9uIHRvIHRvZ2dsZSBNYXJrZXIgQ2x1c3RlclxyXG4gICAgICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwidG9nZ2xlTWFya2VyQ2x1c3RlclwiKVxyXG4gICAgICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyQ2x1c3RlckVuYWJsZWQgPSAhbWFya2VyQ2x1c3RlckVuYWJsZWQ7IC8vIFRvZ2dsZSB0aGUgc3RhdGVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlckNsdXN0ZXJFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuYWJsZSBNYXJrZXIgQ2x1c3RlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAucmVtb3ZlTGF5ZXIobWFya2Vycyk7IC8vIFJlbW92ZSBpbmRpdmlkdWFsIG1hcmtlcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VycyA9IEwubWFya2VyQ2x1c3Rlckdyb3VwKCk7IC8vIENyZWF0ZSBhIG5ldyBtYXJrZXIgY2x1c3RlciBncm91cFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuYWRkTGF5ZXIobWFya2Vycyk7IC8vIEFkZCB0aGUgbmV3IG1hcmtlciBjbHVzdGVyIGdyb3VwIHRvIHRoZSBtYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vycy5hZGRMYXllcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwuZmVhdHVyZUdyb3VwKFttYXJrZXIxLCBtYXJrZXIyLCBtYXJrZXIzXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTsgLy8gQWRkIGluZGl2aWR1YWwgbWFya2VycyB0byB0aGUgY2x1c3RlciBncm91cFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgTWFya2VyIENsdXN0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnJlbW92ZUxheWVyKG1hcmtlcnMpOyAvLyBSZW1vdmUgdGhlIG1hcmtlciBjbHVzdGVyIGdyb3VwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcnMgPSBMLmZlYXR1cmVHcm91cChbbWFya2VyMSwgbWFya2VyMiwgbWFya2VyM10pOyAvLyBDcmVhdGUgYSBuZXcgZmVhdHVyZSBncm91cCB3aXRoIGluZGl2aWR1YWwgbWFya2Vyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuYWRkTGF5ZXIobWFya2Vycyk7IC8vIEFkZCBpbmRpdmlkdWFsIG1hcmtlcnMgdG8gdGhlIG1hcFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBZSxTQUFSLGlCQUFrQztBQUNyQyxNQUFJLHVCQUF1QjtBQUMzQixNQUFJO0FBQ0osU0FBTztBQUFBLElBQ0gsTUFBTSxpQkFBa0I7QUFDcEIsY0FBUSxJQUFJLHNCQUFzQjtBQUNsQyxZQUFNLE1BQU0sRUFBRSxJQUFJLEtBQUssTUFBTSxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUMsUUFBUSxLQUFLLEdBQUcsRUFBRTtBQUVoRSxZQUFNLFFBQVEsRUFBRSxVQUNYLFNBQVMsc0JBQXNCLEVBQy9CLE1BQU0sR0FBRztBQUdkLFlBQU0sVUFBVSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFLFVBQVUsVUFBVTtBQUM5RCxZQUFNLFVBQVUsRUFBRSxPQUFPLENBQUMsT0FBTyxJQUFJLEdBQUc7QUFBQSxRQUNwQyxNQUFNLEVBQUUsZUFBZSxLQUFLO0FBQUEsVUFDeEIsTUFBTTtBQUFBLFVBQ04sYUFBYTtBQUFBLFVBQ2IsUUFBUTtBQUFBLFFBQ1osQ0FBQztBQUFBLE1BQ0wsQ0FBQyxFQUFFLFVBQVUsVUFBVTtBQUN2QixZQUFNLFVBQVUsRUFBRSxPQUFPLENBQUMsT0FBTyxLQUFLLENBQUMsRUFBRSxVQUFVLFVBQVU7QUFHN0QsZ0JBQVUsRUFBRSxhQUFhLENBQUMsU0FBUyxTQUFTLE9BQU8sQ0FBQztBQUdwRCxVQUFJLFNBQVMsT0FBTztBQUdwQixVQUFJO0FBQ0EsY0FBTSxXQUFXLE1BQU0sTUFBTTtBQUFBLFVBQ3pCO0FBQUEsUUFDSjtBQUNBLGNBQU0sVUFBVSxTQUFTLEtBQUs7QUFHOUIsZ0JBQVEsUUFBUSxDQUFDLFlBQVk7QUFDekIsZ0JBQU0sU0FBUyxFQUFFLE9BQU87QUFBQSxZQUNwQixRQUFRO0FBQUEsWUFDUixRQUFRO0FBQUEsVUFDWixDQUFDLEVBQUUsVUFBVSxhQUFhLEtBQUssVUFBVSxPQUFPLENBQUMsRUFBRTtBQUduRCxjQUFJLFFBQVEsdUJBQXVCLEdBQUc7QUFFbEMsa0JBQU0sY0FBYyxFQUFFLEtBQUssTUFBTTtBQUFBLGNBQzdCLFVBQVUsQ0FBQyxJQUFJLEVBQUU7QUFBQSxjQUNqQixPQUFPO0FBQUEsY0FDUCxXQUFXO0FBQUEsY0FDWCxTQUFTO0FBQUEsY0FDVCxZQUFZO0FBQUEsWUFDaEIsQ0FBQztBQUNELG1CQUFPLFFBQVEsV0FBVztBQUFBLFVBQzlCO0FBRUEsa0JBQVEsU0FBUyxNQUFNO0FBQUEsUUFDM0IsQ0FBQztBQUdELFlBQUksU0FBUyxPQUFPO0FBQUEsTUFDeEIsU0FBUyxPQUFPO0FBQ1osZ0JBQVEsTUFBTSw0QkFBNEIsS0FBSztBQUFBLE1BQ25EO0FBRUEsVUFBSSxHQUFHLFFBQVEsV0FBWTtBQUFBLE1BQUMsQ0FBQztBQUc3QixVQUFJLEdBQUcsaUJBQWlCLEVBQUUsT0FBTyxNQUFNLENBQUM7QUFHeEMsVUFBSSxHQUFHLFlBQVk7QUFBQSxRQUNmLFVBQVU7QUFBQSxRQUNWLFlBQVk7QUFBQTtBQUFBLE1BQ2hCLENBQUM7QUFFRCxRQUFFLFFBQVEsT0FBTyxFQUFFLE1BQU0sR0FBRztBQUc1QixZQUFNLFVBQVUsRUFBRSxRQUNiLFFBQVE7QUFBQSxRQUNMLFNBQVM7QUFBQSxRQUNULGFBQWE7QUFBQSxRQUNiLFdBQVc7QUFBQSxRQUNYLFVBQVU7QUFBQSxNQUNkLENBQUMsRUFDQSxNQUFNLEdBQUc7QUFHZCxjQUFRLEdBQUcsU0FBUyxXQUFZO0FBQzVCLGdCQUFRLEtBQUssZ0JBQWdCO0FBQUEsTUFDakMsQ0FBQztBQUdELGNBQVEsU0FBUztBQUFBLFFBQ2IsSUFBSTtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsTUFBTTtBQUFBO0FBQUE7QUFBQSxRQUdOLE9BQU87QUFBQSxRQUNQLFVBQVU7QUFBQSxNQUNkLENBQUM7QUFHRCxlQUNLLGVBQWUscUJBQXFCLEVBQ3BDLGlCQUFpQixTQUFTLFdBQVk7QUFDbkMsK0JBQXVCLENBQUM7QUFFeEIsWUFBSSxzQkFBc0I7QUFFdEIsY0FBSSxZQUFZLE9BQU87QUFDdkIsb0JBQVUsRUFBRSxtQkFBbUI7QUFDL0IsY0FBSSxTQUFTLE9BQU87QUFDcEIsa0JBQVE7QUFBQSxZQUNKLEVBQUUsYUFBYSxDQUFDLFNBQVMsU0FBUyxPQUFPLENBQUM7QUFBQSxVQUM5QztBQUFBLFFBQ0osT0FBTztBQUVILGNBQUksWUFBWSxPQUFPO0FBQ3ZCLG9CQUFVLEVBQUUsYUFBYSxDQUFDLFNBQVMsU0FBUyxPQUFPLENBQUM7QUFDcEQsY0FBSSxTQUFTLE9BQU87QUFBQSxRQUN4QjtBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ1Q7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
