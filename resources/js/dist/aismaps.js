// resources/js/aismaps.js
function leafletAISMaps() {
  let markerClusterEnabled = false;
  let markers;
  let map;
  let trackPlayback;
  return {
    init: async function() {
      map = L.map(this.$refs.map.id).setView(
        [-1.5499571228201094, 117.89427962462793],
        5.4
      );
      const tiles = L.tileLayer.provider("OpenStreetMap.Mapnik").addTo(map);
      const baseLayers = {
        OpenStreetMap: tiles,
        "Google Maps": L.tileLayer(
          "https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}",
          {
            attribution: "Google Maps"
          }
        )
      };
      var ts = new L.aisTrackSymbol({});
      ts.addData({
        msgId: 4,
        mmsi: 24422002,
        name: "demo",
        utcYear: 2016,
        utcMon: 11,
        utcDay: 14,
        utcHour: 13,
        utcMin: 40,
        utcSec: 30,
        posAcc: 1,
        longitude: 8.155278333333333,
        latitude: 54.185555,
        devType: 7,
        raim: 0,
        comstate: { syncState: 0, slotTimeout: 2, slotNr: 1150 },
        timestamp: 1479130830744
      });
      ts.addTo(map);
      try {
        const response = await axios.get(
          "https://lumensopbuntut.cakrawala.id/api/aisdataunique"
        );
        const aisData = response.data.message;
        markers = createMarkers(aisData, markerClusterEnabled);
        map.addLayer(markers);
      } catch (error) {
        console.error("Error fetching AIS data:", error);
      }
      try {
        const data = {
          mmsi: "",
          dateFrom: "2024-01-03",
          dateTo: "2024-01-04",
          sensor: ["ais"]
        };
        const playbackResponse = await axios.post(
          "https://backend.sopbuntutksopbjm.com/api/playback",
          data
        );
        const playbackData = playbackResponse.data.message.ais[0].playback;
        trackPlayback = L.trackplayback(playbackData, map, {
          trackPointOptions: {
            /* Additional options for track points */
          },
          markerOptions: {
            /* Additional options for playback markers */
          }
        });
        const trackplaybackControl = L.trackplaybackcontrol(trackPlayback);
        trackplaybackControl.addTo(map);
        trackPlayback.start();
      } catch (error) {
        console.error("Error fetching AIS data:", error);
      }
      map.on("load", function() {
      });
      map.pm.setGlobalOptions({ optIn: false });
      map.pm.addControls({
        position: "topleft",
        drawMarker: false
        // Disable drawing markers (use your cluster markers instead)
      });
      L.control.locate().addTo(map);
      L.terminator().addTo(map);
      setInterval(function() {
        terminator.setTime();
      }, 6e4);
      const sidebar = L.control.sidebar({
        autopan: false,
        closeButton: true,
        container: "sidebar",
        position: "left"
      }).addTo(map);
      sidebar.addPanel({
        id: "Content",
        tab: '<i class="fa fa-info"></i>',
        pane: `
                       <button id="toggleMarkerCluster">Toggle Marker Cluster</button>
                       <button id="startPlayback">Start Playback</button>
        <button id="stopPlayback">Stop Playback</button>`,
        title: "Sidebar",
        position: "top"
      });
      L.control.layers(baseLayers).addTo(map);
      document.getElementById("toggleMarkerCluster").addEventListener("click", async function() {
        markerClusterEnabled = !markerClusterEnabled;
        map.removeLayer(markers);
        try {
          const response = await axios.get(
            "https://ksop.cakrawala.id/api/aisdataunique"
          );
          const aisData = response.data.message;
          markers = createMarkers(aisData, markerClusterEnabled);
          map.addLayer(markers);
        } catch (error) {
          console.error("Error fetching AIS data:", error);
        }
      });
      document.getElementById("startPlayback").addEventListener("click", function() {
        trackPlayback.start();
      });
      document.getElementById("stopPlayback").addEventListener("click", function() {
        trackPlayback.stop();
      });
    }
  };
}
function createMarkers(data, markerClusterEnabled) {
  const newMarkers = markerClusterEnabled ? L.markerClusterGroup() : L.featureGroup();
  data.forEach((aisItem) => {
    const marker = L.marker([
      aisItem.latitude,
      aisItem.longitude
    ]).bindPopup(`AIS Data: ${JSON.stringify(aisItem)}`);
    if (aisItem.is_inside_geofence === 1) {
      const pulsingIcon = L.icon.pulse({
        iconSize: [10, 10],
        color: "red",
        fillColor: "red",
        animate: true,
        pulseColor: "red"
      });
      marker.setIcon(pulsingIcon);
    }
    newMarkers.addLayer(marker);
  });
  return newMarkers;
}
export {
  leafletAISMaps as default
};
//# sourceMappingURL=data:application/json;base64,
