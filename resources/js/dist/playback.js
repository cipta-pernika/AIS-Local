// resources/js/playback.js
function leafletAISMaps() {
  let map;
  let trackPlayback;
  return {
    init: async function() {
      map = L.map(this.$refs.map.id).setView(
        [-1.5499571228201094, 117.89427962462793],
        5.4
      );
      const tiles = L.tileLayer.provider("OpenStreetMap.Mapnik").addTo(map);
      const baseLayers = {
        OpenStreetMap: tiles,
        "Google Maps": L.tileLayer(
          "https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}",
          {
            attribution: "Google Maps"
          }
        )
      };
      try {
        const data = {
          mmsi: "",
          dateFrom: "2024-01-03",
          dateTo: "2024-01-04",
          sensor: ["ais"]
        };
        const playbackResponse = await axios.post(
          "https://backend.sopbuntutksopbjm.com/api/playback",
          data
        );
        const playbackData = playbackResponse.data.message.ais[0].playback;
        trackPlayback = L.trackplayback(playbackData, map, {
          trackPointOptions: {
            /* Additional options for track points */
          },
          markerOptions: {
            /* Additional options for playback markers */
          }
        });
        const trackplaybackControl = L.trackplaybackcontrol(trackPlayback);
        trackplaybackControl.addTo(map);
        trackPlayback.start();
      } catch (error) {
        console.error("Error fetching AIS data:", error);
      }
      map.on("load", function() {
      });
      L.control.layers(baseLayers).addTo(map);
      document.getElementById("startPlayback").addEventListener("click", function() {
        trackPlayback.start();
      });
      document.getElementById("stopPlayback").addEventListener("click", function() {
        trackPlayback.stop();
      });
    }
  };
}
export {
  leafletAISMaps as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vcGxheWJhY2suanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxlYWZsZXRBSVNNYXBzKCkge1xuICAgIGxldCBtYXA7XG4gICAgbGV0IHRyYWNrUGxheWJhY2s7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbWFwID0gTC5tYXAodGhpcy4kcmVmcy5tYXAuaWQpLnNldFZpZXcoXG4gICAgICAgICAgICAgICAgWy0xLjU0OTk1NzEyMjgyMDEwOTQsIDExNy44OTQyNzk2MjQ2Mjc5M10sXG4gICAgICAgICAgICAgICAgNS40XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCB0aWxlcyA9IEwudGlsZUxheWVyXG4gICAgICAgICAgICAgICAgLnByb3ZpZGVyKFwiT3BlblN0cmVldE1hcC5NYXBuaWtcIilcbiAgICAgICAgICAgICAgICAuYWRkVG8obWFwKTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgYmFzZSBsYXllcnMgb2JqZWN0XG4gICAgICAgICAgICBjb25zdCBiYXNlTGF5ZXJzID0ge1xuICAgICAgICAgICAgICAgIE9wZW5TdHJlZXRNYXA6IHRpbGVzLFxuICAgICAgICAgICAgICAgIFwiR29vZ2xlIE1hcHNcIjogTC50aWxlTGF5ZXIoXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9tdDEuZ29vZ2xlLmNvbS92dC9seXJzPXImeD17eH0meT17eX0mej17en1cIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRpb246IFwiR29vZ2xlIE1hcHNcIixcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBGZXRjaCBBSVMgZGF0YSBmcm9tIHRoZSBBUEkgYW5kIGNyZWF0ZSBtYXJrZXJzXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1tc2k6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGVGcm9tOiBcIjIwMjQtMDEtMDNcIixcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVRvOiBcIjIwMjQtMDEtMDRcIixcbiAgICAgICAgICAgICAgICAgICAgc2Vuc29yOiBbXCJhaXNcIl0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5YmFja1Jlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL2JhY2tlbmQuc29wYnVudHV0a3NvcGJqbS5jb20vYXBpL3BsYXliYWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXliYWNrRGF0YSA9XG4gICAgICAgICAgICAgICAgICAgIHBsYXliYWNrUmVzcG9uc2UuZGF0YS5tZXNzYWdlLmFpc1swXS5wbGF5YmFjaztcblxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIFRyYWNrUGxheWJhY2sgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICB0cmFja1BsYXliYWNrID0gTC50cmFja3BsYXliYWNrKHBsYXliYWNrRGF0YSwgbWFwLCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrUG9pbnRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRyYWNrIHBvaW50cyAqL1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHBsYXliYWNrIG1hcmtlcnMgKi9cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNrcGxheWJhY2tDb250cm9sID1cbiAgICAgICAgICAgICAgICAgICAgTC50cmFja3BsYXliYWNrY29udHJvbCh0cmFja1BsYXliYWNrKTtcblxuICAgICAgICAgICAgICAgIHRyYWNrcGxheWJhY2tDb250cm9sLmFkZFRvKG1hcCk7XG5cbiAgICAgICAgICAgICAgICB0cmFja1BsYXliYWNrLnN0YXJ0KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBBSVMgZGF0YTpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXAub24oXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHt9KTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbGF5ZXIgY29udHJvbCBhbmQgYWRkIGl0IHRvIHRoZSBtYXBcbiAgICAgICAgICAgIEwuY29udHJvbC5sYXllcnMoYmFzZUxheWVycykuYWRkVG8obWFwKTtcblxuICAgICAgICAgICAgLy8gRXZlbnQgaGFuZGxlciB0byBzdGFydCBwbGF5YmFja1xuICAgICAgICAgICAgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJzdGFydFBsYXliYWNrXCIpXG4gICAgICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrUGxheWJhY2suc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gRXZlbnQgaGFuZGxlciB0byBzdG9wIHBsYXliYWNrXG4gICAgICAgICAgICBkb2N1bWVudFxuICAgICAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcInN0b3BQbGF5YmFja1wiKVxuICAgICAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0cmFja1BsYXliYWNrLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFlLFNBQVIsaUJBQWtDO0FBQ3JDLE1BQUk7QUFDSixNQUFJO0FBQ0osU0FBTztBQUFBLElBQ0gsTUFBTSxpQkFBa0I7QUFDcEIsWUFBTSxFQUFFLElBQUksS0FBSyxNQUFNLElBQUksRUFBRSxFQUFFO0FBQUEsUUFDM0IsQ0FBQyxxQkFBcUIsa0JBQWtCO0FBQUEsUUFDeEM7QUFBQSxNQUNKO0FBRUEsWUFBTSxRQUFRLEVBQUUsVUFDWCxTQUFTLHNCQUFzQixFQUMvQixNQUFNLEdBQUc7QUFHZCxZQUFNLGFBQWE7QUFBQSxRQUNmLGVBQWU7QUFBQSxRQUNmLGVBQWUsRUFBRTtBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxhQUFhO0FBQUEsVUFDakI7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUdBLFVBQUk7QUFDQSxjQUFNLE9BQU87QUFBQSxVQUNULE1BQU07QUFBQSxVQUNOLFVBQVU7QUFBQSxVQUNWLFFBQVE7QUFBQSxVQUNSLFFBQVEsQ0FBQyxLQUFLO0FBQUEsUUFDbEI7QUFDQSxjQUFNLG1CQUFtQixNQUFNLE1BQU07QUFBQSxVQUNqQztBQUFBLFVBQ0E7QUFBQSxRQUNKO0FBQ0EsY0FBTSxlQUNGLGlCQUFpQixLQUFLLFFBQVEsSUFBSSxDQUFDLEVBQUU7QUFHekMsd0JBQWdCLEVBQUUsY0FBYyxjQUFjLEtBQUs7QUFBQSxVQUMvQyxtQkFBbUI7QUFBQTtBQUFBLFVBRW5CO0FBQUEsVUFDQSxlQUFlO0FBQUE7QUFBQSxVQUVmO0FBQUEsUUFDSixDQUFDO0FBRUQsY0FBTSx1QkFDRixFQUFFLHFCQUFxQixhQUFhO0FBRXhDLDZCQUFxQixNQUFNLEdBQUc7QUFFOUIsc0JBQWMsTUFBTTtBQUFBLE1BQ3hCLFNBQVMsT0FBTztBQUNaLGdCQUFRLE1BQU0sNEJBQTRCLEtBQUs7QUFBQSxNQUNuRDtBQUVBLFVBQUksR0FBRyxRQUFRLFdBQVk7QUFBQSxNQUFDLENBQUM7QUFHN0IsUUFBRSxRQUFRLE9BQU8sVUFBVSxFQUFFLE1BQU0sR0FBRztBQUd0QyxlQUNLLGVBQWUsZUFBZSxFQUM5QixpQkFBaUIsU0FBUyxXQUFZO0FBQ25DLHNCQUFjLE1BQU07QUFBQSxNQUN4QixDQUFDO0FBR0wsZUFDSyxlQUFlLGNBQWMsRUFDN0IsaUJBQWlCLFNBQVMsV0FBWTtBQUNuQyxzQkFBYyxLQUFLO0FBQUEsTUFDdkIsQ0FBQztBQUFBLElBQ1Q7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
