// resources/js/aismaps.js
function leafletAISMaps() {
  let markerClusterEnabled = false;
  let markers;
  let map;
  return {
    init: async function() {
      map = L.map(this.$refs.map.id).setView(
        [-1.5499571228201094, 117.89427962462793],
        5.4
      );
      const tiles = L.tileLayer.provider("OpenStreetMap.Mapnik").addTo(map);
      const baseLayers = {
        OpenStreetMap: tiles
        // Add other base layers here
      };
      try {
        const response = await axios.get(
          "https://ksop.cakrawala.id/api/aisdataunique"
        );
        const aisData = response.data.message;
        markers = createMarkers(aisData, markerClusterEnabled);
        map.addLayer(markers);
      } catch (error) {
        console.error("Error fetching AIS data:", error);
      }
      map.on("load", function() {
      });
      map.pm.setGlobalOptions({ optIn: false });
      map.pm.addControls({
        position: "topleft",
        drawMarker: false
        // Disable drawing markers (use your cluster markers instead)
      });
      L.control.locate().addTo(map);
      L.terminator().addTo(map);
      setInterval(function() {
        terminator.setTime();
      }, 6e4);
      const sidebar = L.control.sidebar({
        autopan: false,
        closeButton: true,
        container: "sidebar",
        position: "left"
      }).addTo(map);
      sidebar.addPanel({
        id: "Content",
        tab: '<i class="fa fa-info"></i>',
        pane: `
                       <button id="toggleMarkerCluster">Toggle Marker Cluster</button>`,
        title: "Sidebar",
        position: "top"
      });
      L.control.layers(baseLayers).addTo(map);
      document.getElementById("toggleMarkerCluster").addEventListener("click", async function() {
        markerClusterEnabled = !markerClusterEnabled;
        map.removeLayer(markers);
        try {
          const response = await axios.get(
            "https://ksop.cakrawala.id/api/aisdataunique"
          );
          const aisData = response.data.message;
          markers = createMarkers(aisData, markerClusterEnabled);
          map.addLayer(markers);
        } catch (error) {
          console.error("Error fetching AIS data:", error);
        }
      });
    }
  };
}
function createMarkers(data, markerClusterEnabled) {
  const newMarkers = markerClusterEnabled ? L.markerClusterGroup() : L.featureGroup();
  data.forEach((aisItem) => {
    const marker = L.marker([
      aisItem.latitude,
      aisItem.longitude
    ]).bindPopup(`AIS Data: ${JSON.stringify(aisItem)}`);
    if (aisItem.is_inside_geofence === 1) {
      const pulsingIcon = L.icon.pulse({
        iconSize: [10, 10],
        color: "red",
        fillColor: "red",
        animate: true,
        pulseColor: "red"
      });
      marker.setIcon(pulsingIcon);
    }
    newMarkers.addLayer(marker);
  });
  return newMarkers;
}
export {
  leafletAISMaps as default
};
//# sourceMappingURL=data:application/json;base64,
