// resources/js/playback.js
function leafletAISMaps() {
  let map;
  let trackPlayback;
  return {
    init: async function() {
      map = L.map(this.$refs.map.id).setView(
        [-1.5499571228201094, 117.89427962462793],
        5.4
      );
      const tiles = L.tileLayer.provider("OpenStreetMap.Mapnik").addTo(map);
      const baseLayers = {
        OpenStreetMap: tiles,
        "Google Maps": L.tileLayer(
          "https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}",
          {
            attribution: "Google Maps"
          }
        )
      };
      try {
        const data = {
          mmsi: "",
          dateFrom: "2024-01-03",
          dateTo: "2024-01-04",
          sensor: ["ais"]
        };
        const playbackResponse = await axios.post(
          "https://backend.sopbuntutksopbjm.com/api/playback",
          data
        );
        const playbackData = playbackResponse.data.message.ais[0].playback;
        trackPlayback = L.trackplayback(playbackData, map, {
          trackPointOptions: {
            /* Additional options for track points */
          },
          markerOptions: {
            /* Additional options for playback markers */
          }
        });
        const trackplaybackControl = L.trackplaybackcontrol(trackPlayback);
        trackplaybackControl.addTo(map);
        trackPlayback.start();
      } catch (error) {
        console.error("Error fetching AIS data:", error);
      }
      map.on("load", function() {
      });
      L.control.layers(baseLayers).addTo(map);
      document.getElementById("startPlayback").addEventListener("click", function() {
        trackPlayback.start();
      });
      document.getElementById("stopPlayback").addEventListener("click", function() {
        trackPlayback.stop();
      });
    }
  };
}
export {
  leafletAISMaps as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vcGxheWJhY2suanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxlYWZsZXRBSVNNYXBzKCkge1xyXG4gICAgbGV0IG1hcDtcclxuICAgIGxldCB0cmFja1BsYXliYWNrO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG1hcCA9IEwubWFwKHRoaXMuJHJlZnMubWFwLmlkKS5zZXRWaWV3KFxyXG4gICAgICAgICAgICAgICAgWy0xLjU0OTk1NzEyMjgyMDEwOTQsIDExNy44OTQyNzk2MjQ2Mjc5M10sXHJcbiAgICAgICAgICAgICAgICA1LjRcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRpbGVzID0gTC50aWxlTGF5ZXJcclxuICAgICAgICAgICAgICAgIC5wcm92aWRlcihcIk9wZW5TdHJlZXRNYXAuTWFwbmlrXCIpXHJcbiAgICAgICAgICAgICAgICAuYWRkVG8obWFwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGJhc2UgbGF5ZXJzIG9iamVjdFxyXG4gICAgICAgICAgICBjb25zdCBiYXNlTGF5ZXJzID0ge1xyXG4gICAgICAgICAgICAgICAgT3BlblN0cmVldE1hcDogdGlsZXMsXHJcbiAgICAgICAgICAgICAgICBcIkdvb2dsZSBNYXBzXCI6IEwudGlsZUxheWVyKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9tdDEuZ29vZ2xlLmNvbS92dC9seXJzPXImeD17eH0meT17eX0mej17en1cIixcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uOiBcIkdvb2dsZSBNYXBzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZldGNoIEFJUyBkYXRhIGZyb20gdGhlIEFQSSBhbmQgY3JlYXRlIG1hcmtlcnNcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW1zaTogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBkYXRlRnJvbTogXCIyMDI0LTAxLTAzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVRvOiBcIjIwMjQtMDEtMDRcIixcclxuICAgICAgICAgICAgICAgICAgICBzZW5zb3I6IFtcImFpc1wiXSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5YmFja1Jlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcclxuICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vYmFja2VuZC5zb3BidW50dXRrc29wYmptLmNvbS9hcGkvcGxheWJhY2tcIixcclxuICAgICAgICAgICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWJhY2tEYXRhID1cclxuICAgICAgICAgICAgICAgICAgICBwbGF5YmFja1Jlc3BvbnNlLmRhdGEubWVzc2FnZS5haXNbMF0ucGxheWJhY2s7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgVHJhY2tQbGF5YmFjayBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgdHJhY2tQbGF5YmFjayA9IEwudHJhY2twbGF5YmFjayhwbGF5YmFja0RhdGEsIG1hcCwge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrUG9pbnRPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdHJhY2sgcG9pbnRzICovXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgcGxheWJhY2sgbWFya2VycyAqL1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFja3BsYXliYWNrQ29udHJvbCA9XHJcbiAgICAgICAgICAgICAgICAgICAgTC50cmFja3BsYXliYWNrY29udHJvbCh0cmFja1BsYXliYWNrKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0cmFja3BsYXliYWNrQ29udHJvbC5hZGRUbyhtYXApO1xyXG5cclxuICAgICAgICAgICAgICAgIHRyYWNrUGxheWJhY2suc3RhcnQoKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBBSVMgZGF0YTpcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtYXAub24oXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHt9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGxheWVyIGNvbnRyb2wgYW5kIGFkZCBpdCB0byB0aGUgbWFwXHJcbiAgICAgICAgICAgIEwuY29udHJvbC5sYXllcnMoYmFzZUxheWVycykuYWRkVG8obWFwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEV2ZW50IGhhbmRsZXIgdG8gc3RhcnQgcGxheWJhY2tcclxuICAgICAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcInN0YXJ0UGxheWJhY2tcIilcclxuICAgICAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrUGxheWJhY2suc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gRXZlbnQgaGFuZGxlciB0byBzdG9wIHBsYXliYWNrXHJcbiAgICAgICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJzdG9wUGxheWJhY2tcIilcclxuICAgICAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrUGxheWJhY2suc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFlLFNBQVIsaUJBQWtDO0FBQ3JDLE1BQUk7QUFDSixNQUFJO0FBQ0osU0FBTztBQUFBLElBQ0gsTUFBTSxpQkFBa0I7QUFDcEIsWUFBTSxFQUFFLElBQUksS0FBSyxNQUFNLElBQUksRUFBRSxFQUFFO0FBQUEsUUFDM0IsQ0FBQyxxQkFBcUIsa0JBQWtCO0FBQUEsUUFDeEM7QUFBQSxNQUNKO0FBRUEsWUFBTSxRQUFRLEVBQUUsVUFDWCxTQUFTLHNCQUFzQixFQUMvQixNQUFNLEdBQUc7QUFHZCxZQUFNLGFBQWE7QUFBQSxRQUNmLGVBQWU7QUFBQSxRQUNmLGVBQWUsRUFBRTtBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxhQUFhO0FBQUEsVUFDakI7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUdBLFVBQUk7QUFDQSxjQUFNLE9BQU87QUFBQSxVQUNULE1BQU07QUFBQSxVQUNOLFVBQVU7QUFBQSxVQUNWLFFBQVE7QUFBQSxVQUNSLFFBQVEsQ0FBQyxLQUFLO0FBQUEsUUFDbEI7QUFDQSxjQUFNLG1CQUFtQixNQUFNLE1BQU07QUFBQSxVQUNqQztBQUFBLFVBQ0E7QUFBQSxRQUNKO0FBQ0EsY0FBTSxlQUNGLGlCQUFpQixLQUFLLFFBQVEsSUFBSSxDQUFDLEVBQUU7QUFHekMsd0JBQWdCLEVBQUUsY0FBYyxjQUFjLEtBQUs7QUFBQSxVQUMvQyxtQkFBbUI7QUFBQTtBQUFBLFVBRW5CO0FBQUEsVUFDQSxlQUFlO0FBQUE7QUFBQSxVQUVmO0FBQUEsUUFDSixDQUFDO0FBRUQsY0FBTSx1QkFDRixFQUFFLHFCQUFxQixhQUFhO0FBRXhDLDZCQUFxQixNQUFNLEdBQUc7QUFFOUIsc0JBQWMsTUFBTTtBQUFBLE1BQ3hCLFNBQVMsT0FBTztBQUNaLGdCQUFRLE1BQU0sNEJBQTRCLEtBQUs7QUFBQSxNQUNuRDtBQUVBLFVBQUksR0FBRyxRQUFRLFdBQVk7QUFBQSxNQUFDLENBQUM7QUFHN0IsUUFBRSxRQUFRLE9BQU8sVUFBVSxFQUFFLE1BQU0sR0FBRztBQUd0QyxlQUNLLGVBQWUsZUFBZSxFQUM5QixpQkFBaUIsU0FBUyxXQUFZO0FBQ25DLHNCQUFjLE1BQU07QUFBQSxNQUN4QixDQUFDO0FBR0wsZUFDSyxlQUFlLGNBQWMsRUFDN0IsaUJBQWlCLFNBQVMsV0FBWTtBQUNuQyxzQkFBYyxLQUFLO0FBQUEsTUFDdkIsQ0FBQztBQUFBLElBQ1Q7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
