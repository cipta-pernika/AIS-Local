// resources/js/cekposisi.js
function leafletAISMaps() {
  let map;
  let trackPlayback;
  return {
    init: async function() {
      map = L.map(this.$refs.map.id).setView(
        [-1.5499571228201094, 117.89427962462793],
        5.4
      );
      const tiles = L.tileLayer.provider("OpenStreetMap.Mapnik").addTo(map);
      const baseLayers = {
        OpenStreetMap: tiles,
        "Google Maps": L.tileLayer(
          "https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}",
          {
            attribution: "Google Maps"
          }
        )
      };
      try {
        const data = {
          mmsi: "",
          dateFrom: "2024-01-03",
          dateTo: "2024-01-04",
          sensor: ["ais"]
        };
        const playbackResponse = await axios.post(
          "https://backend.sopbuntutksopbjm.com/api/playback",
          data
        );
        const playbackData = playbackResponse.data.message.ais[0].playback;
        trackPlayback = L.trackplayback(playbackData, map, {
          trackPointOptions: {
            /* Additional options for track points */
          },
          markerOptions: {
            /* Additional options for playback markers */
          }
        });
        const trackplaybackControl = L.trackplaybackcontrol(trackPlayback);
        trackplaybackControl.addTo(map);
        trackPlayback.start();
      } catch (error) {
        console.error("Error fetching AIS data:", error);
      }
      map.on("load", function() {
      });
    }
  };
}
export {
  leafletAISMaps as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vY2VrcG9zaXNpLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsZWFmbGV0QUlTTWFwcygpIHtcbiAgICBsZXQgbWFwO1xuICAgIGxldCB0cmFja1BsYXliYWNrO1xuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1hcCA9IEwubWFwKHRoaXMuJHJlZnMubWFwLmlkKS5zZXRWaWV3KFxuICAgICAgICAgICAgICAgIFstMS41NDk5NTcxMjI4MjAxMDk0LCAxMTcuODk0Mjc5NjI0NjI3OTNdLFxuICAgICAgICAgICAgICAgIDUuNFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgdGlsZXMgPSBMLnRpbGVMYXllclxuICAgICAgICAgICAgICAgIC5wcm92aWRlcihcIk9wZW5TdHJlZXRNYXAuTWFwbmlrXCIpXG4gICAgICAgICAgICAgICAgLmFkZFRvKG1hcCk7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGJhc2UgbGF5ZXJzIG9iamVjdFxuICAgICAgICAgICAgY29uc3QgYmFzZUxheWVycyA9IHtcbiAgICAgICAgICAgICAgICBPcGVuU3RyZWV0TWFwOiB0aWxlcyxcbiAgICAgICAgICAgICAgICBcIkdvb2dsZSBNYXBzXCI6IEwudGlsZUxheWVyKFxuICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vbXQxLmdvb2dsZS5jb20vdnQvbHlycz1yJng9e3h9Jnk9e3l9Jno9e3p9XCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uOiBcIkdvb2dsZSBNYXBzXCIsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gRmV0Y2ggQUlTIGRhdGEgZnJvbSB0aGUgQVBJIGFuZCBjcmVhdGUgbWFya2Vyc1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBtbXNpOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRlRnJvbTogXCIyMDI0LTAxLTAzXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGVUbzogXCIyMDI0LTAxLTA0XCIsXG4gICAgICAgICAgICAgICAgICAgIHNlbnNvcjogW1wiYWlzXCJdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWJhY2tSZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9iYWNrZW5kLnNvcGJ1bnR1dGtzb3Biam0uY29tL2FwaS9wbGF5YmFja1wiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5YmFja0RhdGEgPVxuICAgICAgICAgICAgICAgICAgICBwbGF5YmFja1Jlc3BvbnNlLmRhdGEubWVzc2FnZS5haXNbMF0ucGxheWJhY2s7XG5cbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBUcmFja1BsYXliYWNrIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgdHJhY2tQbGF5YmFjayA9IEwudHJhY2twbGF5YmFjayhwbGF5YmFja0RhdGEsIG1hcCwge1xuICAgICAgICAgICAgICAgICAgICB0cmFja1BvaW50T3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogQWRkaXRpb25hbCBvcHRpb25zIGZvciB0cmFjayBwb2ludHMgKi9cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogQWRkaXRpb25hbCBvcHRpb25zIGZvciBwbGF5YmFjayBtYXJrZXJzICovXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0cmFja3BsYXliYWNrQ29udHJvbCA9XG4gICAgICAgICAgICAgICAgICAgIEwudHJhY2twbGF5YmFja2NvbnRyb2wodHJhY2tQbGF5YmFjayk7XG5cbiAgICAgICAgICAgICAgICB0cmFja3BsYXliYWNrQ29udHJvbC5hZGRUbyhtYXApO1xuXG4gICAgICAgICAgICAgICAgdHJhY2tQbGF5YmFjay5zdGFydCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgQUlTIGRhdGE6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWFwLm9uKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBZSxTQUFSLGlCQUFrQztBQUNyQyxNQUFJO0FBQ0osTUFBSTtBQUNKLFNBQU87QUFBQSxJQUNILE1BQU0saUJBQWtCO0FBQ3BCLFlBQU0sRUFBRSxJQUFJLEtBQUssTUFBTSxJQUFJLEVBQUUsRUFBRTtBQUFBLFFBQzNCLENBQUMscUJBQXFCLGtCQUFrQjtBQUFBLFFBQ3hDO0FBQUEsTUFDSjtBQUVBLFlBQU0sUUFBUSxFQUFFLFVBQ1gsU0FBUyxzQkFBc0IsRUFDL0IsTUFBTSxHQUFHO0FBR2QsWUFBTSxhQUFhO0FBQUEsUUFDZixlQUFlO0FBQUEsUUFDZixlQUFlLEVBQUU7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksYUFBYTtBQUFBLFVBQ2pCO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFHQSxVQUFJO0FBQ0EsY0FBTSxPQUFPO0FBQUEsVUFDVCxNQUFNO0FBQUEsVUFDTixVQUFVO0FBQUEsVUFDVixRQUFRO0FBQUEsVUFDUixRQUFRLENBQUMsS0FBSztBQUFBLFFBQ2xCO0FBQ0EsY0FBTSxtQkFBbUIsTUFBTSxNQUFNO0FBQUEsVUFDakM7QUFBQSxVQUNBO0FBQUEsUUFDSjtBQUNBLGNBQU0sZUFDRixpQkFBaUIsS0FBSyxRQUFRLElBQUksQ0FBQyxFQUFFO0FBR3pDLHdCQUFnQixFQUFFLGNBQWMsY0FBYyxLQUFLO0FBQUEsVUFDL0MsbUJBQW1CO0FBQUE7QUFBQSxVQUVuQjtBQUFBLFVBQ0EsZUFBZTtBQUFBO0FBQUEsVUFFZjtBQUFBLFFBQ0osQ0FBQztBQUVELGNBQU0sdUJBQ0YsRUFBRSxxQkFBcUIsYUFBYTtBQUV4Qyw2QkFBcUIsTUFBTSxHQUFHO0FBRTlCLHNCQUFjLE1BQU07QUFBQSxNQUN4QixTQUFTLE9BQU87QUFDWixnQkFBUSxNQUFNLDRCQUE0QixLQUFLO0FBQUEsTUFDbkQ7QUFFQSxVQUFJLEdBQUcsUUFBUSxXQUFZO0FBQUEsTUFBQyxDQUFDO0FBQUEsSUFDakM7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
